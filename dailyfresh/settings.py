"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 1.8.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

from django.conf.global_settings import DEFAULT_FILE_STORAGE

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-9+-^6u+-hm0_%2u8&q_!y18h(2r&sm1pfpe)%c(wkksqr2yb9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.users',
    'apps.goods',
    'apps.cart',
    'apps.orders',
    'tinymce',
    'haystack',
)

TINYMCE_DEFAULT_CONFIG = {
    'theme':'advanced', #丰富样式
    'width':600,
    'height':400,
}

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_dailyfresh',
        'USER': 'root',
        'PASSWORD': 'mysql',
        'HOST': 'localhost',
        'PORT': '3306',

    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR , 'static')]

# 设置模型类
AUTH_USER_MODEL = 'users.User'

# 邮件发送配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'    # 导入邮件模块
EMAIL_HOST = 'smtp.163.com'                 # 发邮件主机
EMAIL_PORT = 25                             # 发邮件端口
EMAIL_HOST_USER = '13798076559@163.com'       # 发件人邮件
EMAIL_HOST_PASSWORD = 'yuqiong114'           # 邮箱授权时获得授权码，非注册登录密码
EMAIL_FROM = '天天生鲜<13798076559@163.com>'   # 邮件中的显示的发件人, 邮箱需要与发件人邮箱一致

# session数据缓存到redis中
SESSION_ENGIN = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# 配置loginRequired装饰器使用，没有登陆跳转到此地址
LOGIN_URL = '/users/login'

# 使用自定义的文件存储类
DEFAULT_FILE_STORAGE = 'utils.fastdfs.storage.FdfsStorage'



# 使用redis来保存session数据, 并作为项目的缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 配置haystack框架
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh搜索引擎
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        # 指定生成的索引库保存在哪个目录下
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 当添加、修改、删除了数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 设置全文检索结果每页显示2条数据
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 2

# 配置haystack框架
HAYSTACK_CONNECTIONS = {
    'default': {
        # # 使用whoosh搜索引擎
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        # 使用whoosh搜索引擎(使用jiebar中文分词工具)
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        # 指定生成的索引库保存在哪个目录下
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

DEBUG = 'False'
ALLOWED_HOSTS = ['*']

STATIC_ROOT = '/home/python/Desktop/static'